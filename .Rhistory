cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, avg_bytes = mean(size))
summarize(by_package, mean(size))
?n
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679
)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,count)
top_counts_sorted <- arrange(top_counts,desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_counts <- filter(pack_sum, unique > 465)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(count))
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
submit()
students3
library(swirl)
swirl()
View(students3)
submit()
?spread
View(students3)
submit()
View(students3)
reset()
sumbit()
submit()
View(students3)
submit()
submit()
submit()
View(students3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
View(students3)
extract_numeric("class5")
submit()
View(students4)
students4
submit()
?unique
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = passed)
mutate(passed, status = passed)
mutate(passed, status = 1)
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dtl
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55).
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 5, minutes = 58, seconds = 55)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
hours = 8, minutes = 34, seconds = 55
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) +minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
# The linkedin and facebook vectors have already been created for you
linkedin <- list(16, 9, 13, 5, 2, 17, 14)
facebook <- list(17, 7, 5, 16, 8, 13, 14)
# Convert linkedin and facebook to a vector: li_vec and fb_vec
li_vec <- as.vector(linkedin)
fb_vec <- as.vector(facebook)
# Append fb_vec to li_vec: social_vec
social_vec <- append(li_vec, fb_vec)
# Sort social_vec
sort(social_vec, decreasing = TRUE)
# The linkedin and facebook vectors have already been created for you
linkedin <- list(16, 9, 13, 5, 2, 17, 14)
facebook <- list(17, 7, 5, 16, 8, 13, 14)
# Convert linkedin and facebook to a vector: li_vec and fb_vec
li_vec <- as.vector(linkedin)
fb_vec <- as.vector(facebook)
# Append fb_vec to li_vec: social_vec
social_vec <- append(li_vec, fb_vec)
# Sort social_vec
sort.list(social_vec, decreasing = TRUE)
# The linkedin and facebook vectors have already been created for you
linkedin <- list(16, 9, 13, 5, 2, 17, 14)
facebook <- list(17, 7, 5, 16, 8, 13, 14)
# Convert linkedin and facebook to a vector: li_vec and fb_vec
li_vec <- as.vector(linkedin)
fb_vec <- as.vector(facebook)
# Append fb_vec to li_vec: social_vec
social_vec <- append(li_vec, fb_vec)
# Sort social_vec
sort.vector(social_vec, decreasing = TRUE)
# The linkedin and facebook vectors have already been created for you
linkedin <- list(16, 9, 13, 5, 2, 17, 14)
facebook <- list(17, 7, 5, 16, 8, 13, 14)
# Convert linkedin and facebook to a vector: li_vec and fb_vec
li_vec <- as.vector(linkedin)
fb_vec <- as.vector(facebook)
# Append fb_vec to li_vec: social_vec
social_vec <- append(li_vec, fb_vec)
# Sort social_vec
sort(social_vec, decreasing = TRUE)
# The linkedin and facebook vectors have already been created for you
linkedin <- list(16, 9, 13, 5, 2, 17, 14)
facebook <- list(17, 7, 5, 16, 8, 13, 14)
# Convert linkedin and facebook to a vector: li_vec and fb_vec
li_vec <- as.vector(linkedin)
fb_vec <- as.vector(facebook)
# Append fb_vec to li_vec: social_vec
social_vec <- merge(li_vec, fb_vec)
# Sort social_vec
sort(social_vec, decreasing = TRUE)
?merge
?append
# The linkedin and facebook vectors have already been created for you
linkedin <- list(16, 9, 13, 5, 2, 17, 14)
facebook <- list(17, 7, 5, 16, 8, 13, 14)
# Convert linkedin and facebook to a vector: li_vec and fb_vec
li_vec <- as.vector(linkedin)
fb_vec <- as.vector(facebook)
# Append fb_vec to li_vec: social_vec
social_vec <- append(li_vec, fb_vec)
# Sort social_vec
sort(social_vec, decreasing = TRUE)
setwd("~/Programming/RepData_PeerAssessment1")
summary(data)
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv")
summary(data)
mean(data$steps, na.rm = TRUE)
library(dplyr)
processed <- data %>%
group_by(date, steps) %>%
summarise(mean = mean(steps, na.rm = TRUE))
processed <- data %>%
group_by(date, steps) %>%
summarise(mean = mean(steps, na.rm = TRUE))
processed
processed <- data %>%
group_by(date) %>%
summarise(mean = mean(steps, na.rm = TRUE))
processed
data <- read.csv("activity.csv", NA = "NA")
data <- read.csv("activity.csv", na.strings = "NA")
processed <- data %>%
group_by(date) %>%
summarise(mean = mean(steps, na.rm = TRUE))
processed
processed %>% ggvis(~mean %>% layer_histograms()
library(ggvis)
install.packages(ggvis)
install.packages("ggvis")
library(ggvis)
processed %>% ggvis(~mean %>% layer_histograms()
processed %>% ggvis(~mean) %>% layer_histograms()
processed %>% ggvis(~mean) %>% layer_histograms()
processed.median <- data %>%
group_by(date) %>%
summarise(median = median(steps, na.rm = TRUE))
processed.median %>% ggvis(~median) %>% layer_histograms()
processed.median
processed.median <- data %>%
group_by(date) %>%
summarise(median = median(steps, na.rm = TRUE))
processed.median
processed <- data %>%
group_by(date) %>%
summarise(mean = mean(steps, na.rm = TRUE))
processed
data <- read.csv("activity.csv", na.strings = "NA")
processed.median <- data %>%
group_by(date) %>%
summarise(median = median(steps, na.rm = TRUE))
processed.median %>% ggvis(~median) %>% layer_histograms()
processed <- data %>%
group_by(date) %>%
summarise(mean = mean(steps, na.rm = TRUE))
processed
meanStepsPerDay <- sapply(stepsSplit, mean, na.rm=TRUE)
meanStepsPerDay <- sapply(data, mean, na.rm=TRUE)
meanStepsPerDay
processed <- data %>%
group_by(date) %>%
summarise(total = sum(steps, na.rm = TRUE))
processed
processed %>% ggvis(~total) %>% layer_histograms()
processed %>% ggvis(~total) %>% layer_histograms() %> add_axis("x", title = "Date") %>% add_axis("y", title = "Daily Total")
processed %>% ggvis(~total) %>% layer_histograms() %>% add_axis("x", title = "Date") %>% add_axis("y", title = "Daily Total")
processed %>% ggvis(~total) %>% layer_histograms() %>% add_axis("x", title = "Value") %>% add_axis("y", title = "Count")
processed <- data %>%
group_by(date) %>%
summarise(total = sum(steps, na.rm = TRUE))
processed
median(processed$total)
mean(processed$total)
daily <- data %>%
group_by(interval) %>%
summarise(average = mean(steps, na.rm = TRUE))
daily %>% ggvis(~average) %>% layer_points()
daily
daily %>% ggvis(~average)
daily %>% ggvis(~average) %>% layer_bars()
daily %>% ggvis(~interval, ~average) %>% layer_bars()
daily
daily %>% ggvis(~interval, ~average) %>% layer_lines()
daily %>% ggvis(~interval, ~average) %>% layer_lines(fill = "blue")
max(daily$steps)
which.max(daily$steps)
which.max(daily$average)
daily %>%
mutate(rank = rank(desc(average))) %>%
filter(rank == 1)
most.active <- daily %>%
mutate(rank = rank(desc(average))) %>%
filter(rank == 1)
most.active <- daily %>%
mutate(rank = rank(desc(average))) %>%
filter(rank == 1)
most.active
most.active$interval
processed %>% ggvis(~total) %>% layer_histograms(width = 1000) %>% add_axis("x", title = "Value") %>% add_axis("y", title = "Count")
processed %>% ggvis(~total) %>% layer_histograms(width = 1000, range = 22) %>% add_axis("x", title = "Value") %>% add_axis("y", title = "Count")
processed %>% ggvis(~total) %>% layer_histograms(width = 1000) %>% add_axis("x", title = "Value") %>% add_axis("y", title = "Count", range = 22)
processed %>% ggvis(~total) %>% layer_histograms(width = 1000) %>% add_axis("x", title = "Value") %>% add_axis("y", title = "Count")
is.na(data$steps)
sum(is.na(data$steps))
daily
just.nas <- data %>%
filter(is.na(steps) = TRUE)
just.nas <- data %>%
filter(is.na(steps) == TRUE)
just.nas
?merge
just.nas <- filter(data, is.na(steps) == TRUE)
daily
row.names(daily) = daily$interval
row.names(daily)
daily
daily$average[15]
data.impute = data
for (i in 1:length(data:impute)){
if(is.na(data.impute$steps[i]) == TRUE ) {
data.impute$steps[i] == daily$average[data.impute$interval]
} else{
next()
}
}
data.impute = data
for (i in 1:length(data.impute)){
if(is.na(data.impute$steps[i]) == TRUE ) {
data.impute$steps[i] == daily$average[data.impute$interval]
} else{
next()
}
}
data.impute
View(data.impute)
summary(data.impute)
data.impute = data
View(data)
data.impute[1]
data.impute$steps[1]
daily$average[data.impute$interval[1]]
data.impute$interval[1]
daily$average[0]
daily$average[5]
View(daily)
View(daily)
daily$average[0]
daily$average[5]
daily$average[[5]]
row.names(daily) = daily$interval
daily$average[0]
daily$average[0,]
daily$average[5,]
daily$average["5",]
daily$average[,1]
daily$average[,0]
daily[0]$average
daily["0"]$average
daily[5]$average
daily[5,]$average
row.names(daily) = daily$interval
rown.names(daily)
row.names(daily)
filter(daily, interval == data.impute$interval[1])$average
for (i in 1:length(data.impute)){
if(is.na(data.impute$steps[i]) == TRUE ) {
data.impute$steps[i] = filter(daily, interval == data.impute$interval[i])$average
} else{
next()
}
}
View(data.impute)
summary(data.impute)
daily <- data %>%
group_by(interval) %>%
summarise(average = mean(steps, na.rm = TRUE))
summary(daily)
data.impute = data
for (i in 1:length(data.impute)){
if(is.na(data.impute$steps[i]) == TRUE ) {
data.impute$steps[i] = filter(daily, interval == data.impute$interval[i])$average
} else{
next()
}
}
summary(daily)
summary(data.impute)
View(data.impute)
View(daily)
filter(daily, interval == data.impute$interval[2])$average
filter(daily, interval == data.impute$interval[3])$average
filter(daily, interval == data.impute$interval[4])$average
filter(daily, interval == data.impute$interval[5])$average
length(data.impute)
length(data.impute$steps
)
for (i in 1:length(data.impute$steps)){
if(is.na(data.impute$steps[i]) == TRUE ) {
data.impute$steps[i] = filter(daily, interval == data.impute$interval[i])$average
}
}
View(data.impute)
impute.processed <- data.impute %>%
group_by(date) %>%
summarise(total = sum(steps, na.rm = TRUE))
impute.processed %>% ggvis(~total) %>% layer_histograms(width = 1000) %>% add_axis("x", title = "Value") %>% add_axis("y", title = "Count")
processed %>% ggvis(~total) %>% layer_histograms(width = 1000) %>% add_axis("x", title = "Value") %>% add_axis("y", title = "Count")
data.impute$dayofweek <-weekdays(as.Date(data.impute$date))
View(data.impute)
data.impute$dayofweek <-weekdays(as.Date(data.impute$date))
for (i in 1:length(data.impute$dayofweek)) {
if (data.impute$dayofweek[i] == "Saturday") {
day[i]<-"Weekend"
}else if (data.impute$dayofweek[i] == "Sunday") {
day[i]<-"Weekend"
}else {
day[i]<-"Weekday"
}
}
data.impute$day <- "Weekday"
for (i in 1:length(data.impute$dayofweek)) {
if (data.impute$dayofweek[i] == "Saturday") {
day[i]<-"Weekend"
}else if (data.impute$dayofweek[i] == "Sunday") {
day[i]<-"Weekend"
}
}
for (i in 1:length(data.impute$dayofweek)) {
if (data.impute$dayofweek[i] == "Saturday") {
data.impute$day[i]<-"Weekend"
}else if (data.impute$dayofweek[i] == "Sunday") {
data.impute$day[i]<-"Weekend"
}
}
View(data.impute)
library(ggplot2)
daily.impute.mean <- data.impute %>%
group_by(interval) %>%
summarise(average = mean(steps, na.rm = TRUE))
xyplot(steps ~ interval | as.factor(day), data = daily.impute.mean,
type = "l", layout = c(1, 2), col = c("purple"), main = "Average Number of Steps by Time Interval (imputing missing values)",
xlab = "Five-minute time period", ylab = "Avg number of steps")
library(lattice)
xyplot(steps ~ interval | as.factor(day), data = daily.impute.mean,
type = "l", layout = c(1, 2), col = c("purple"), main = "Average Number of Steps by Time Interval (imputing missing values)",
xlab = "Five-minute time period", ylab = "Avg number of steps")
data.impute$dayofweek <-weekdays(as.Date(data.impute$date))
data.impute$day <- "Weekday"
for (i in 1:length(data.impute$dayofweek)) {
if (data.impute$dayofweek[i] == "Saturday") {
data.impute$day[i]<-"Weekend"
}else if (data.impute$dayofweek[i] == "Sunday") {
data.impute$day[i]<-"Weekend"
}
}
daily.impute.mean <- data.impute %>%
group_by(interval) %>%
summarise(average = mean(steps, na.rm = TRUE))
xyplot(steps ~ interval | as.factor(day), data = daily.impute.mean, type = "l", layout = c(1, 2), col = c("purple"), main = "Average Number of Steps by Time Interval (imputing missing values)", xlab = "Five-minute time period", ylab = "Avg number of steps")
View(data.impute)
xyplot(steps ~ interval | as.factor(data.impute$day), data = daily.impute.mean, type = "l", layout = c(1, 2), col = c("purple"), main = "Average Number of Steps by Time Interval (imputing missing values)", xlab = "Five-minute time period", ylab = "Avg number of steps")
xyplot(average ~ interval | as.factor(data.impute$day), data = daily.impute.mean, type = "l", layout = c(1, 2), col = c("purple"), main = "Average Number of Steps by Time Interval (imputing missing values)", xlab = "Five-minute time period", ylab = "Avg number of steps")
data.impute = data
for (i in 1:length(data.impute$steps)){
if(is.na(data.impute$steps[i]) == TRUE ) {
data.impute$steps[i] = filter(daily, interval == data.impute$interval[i])$average
}
}
impute.processed <- data.impute %>%
impute.processed %>% ggvis(~total) %>% layer_histograms(width = 1000) %>% add_axis("x", title = "Value") %>% add_axis("y", title = "Count")
impute.processed <- data.impute %>%
group_by(date) %>%
summarise(total = sum(steps, na.rm = TRUE))
impute.processed %>% ggvis(~total) %>% layer_histograms(width = 1000) %>% add_axis("x", title = "Value") %>% add_axis("y", title = "Count")
data.impute$dayofweek <-weekdays(as.Date(data.impute$date))
data.impute$day <- "Weekday"
data.impute$day <- "Weekday"
for (i in 1:length(data.impute$dayofweek)) {
if (data.impute$dayofweek[i] == "Saturday") {
data.impute$day[i]<-"Weekend"
}else if (data.impute$dayofweek[i] == "Sunday") {
data.impute$day[i]<-"Weekend"
}
}
daily.impute.mean <- data.impute %>%
group_by(interval) %>%
summarise(average = mean(steps, na.rm = TRUE))
xyplot(average ~ interval | as.factor(data.impute$day), data = daily.impute.mean, type = "l", layout = c(1, 2), col = c("purple"), main = "Average Number of Steps by Time Interval (imputing missing values)", xlab = "Five-minute time period", ylab = "Avg number of steps")
xyplot(average ~ interval | as.factor(data.impute.mean$day), data = daily.impute.mean, type = "l", layout = c(1, 2), col = c("purple"), main = "Average Number of Steps by Time Interval (imputing missing values)", xlab = "Five-minute time period", ylab = "Avg number of steps")
daily.impute.mean <- data.impute %>%
group_by(interval) %>%
summarise(average = mean(steps, na.rm = TRUE))
daily.impute.mean
daily.impute.mean <- data.impute %>%
group_by(interval) %>%
summarise(average = mean(steps, na.rm = TRUE), day)
summarise(average = mean(steps, na.rm = TRUE), day = day)
daily.impute.mean <- data.impute %>%
group_by(interval, day) %>%
summarise(average = mean(steps, na.rm = TRUE))
xyplot(average ~ interval | as.factor(data.impute.mean$day), data = daily.impute.mean, type = "l", layout = c(1, 2), col = c("purple"), main = "Average Number of Steps by Time Interval (imputing missing values)", xlab = "Five-minute time period", ylab = "Avg number of steps")
daily.impute.mean
xyplot(average ~ interval | as.factor(day), data = daily.impute.mean, type = "l", layout = c(1, 2), col = c("purple"), main = "Average Number of Steps by Time Interval (imputing missing values)", xlab = "Five-minute time period", ylab = "Avg number of steps")
processed %>% ggvis(~total) %>% layer_histograms(width = 1000, fill := "azure"") %>% add_axis("x", title = "Value") %>% add_axis("y", title = "Count")
processed %>% ggvis(~total) %>% layer_histograms(width = 1000, fill := "azure") %>% add_axis("x", title = "Value") %>% add_axis("y", title = "Count")
processed %>% ggvis(~total) %>% layer_histograms(width = 1000, fill := "periwinkle") %>% add_axis("x", title = "Value") %>% add_axis("y", title = "Count")
processed %>% ggvis(~total) %>% layer_histograms(width = 1000, fill := "orangered") %>% add_axis("x", title = "Value") %>% add_axis("y", title = "Count")
round(mean(processed$total), digits = 0)
round(mean(processed$total), digits = 2)
round(mean(impute.processed$total), digits = 2)
round(median(impute.processed$total), digits = 2)
round(mean(impute.processed$total), digits = 2)
